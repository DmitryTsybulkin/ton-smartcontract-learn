#pragma version >=0.2.0;
;; #pragma compute-asm-ltr


(int) load_data() inline {
    var ds = get_data().begin_parse();
    return (ds~load_uint(64)); ;; read a 64 bit unsigned int from the slice and return it
}

() save_data(int counter) impure inline {
    set_data(begin_cell()
            .store_uint(counter, 64)
            .end_cell());
}

() store_data() impure inline_ref {
    set_data(begin_cell().end_cell());
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ~dump(msg_value);
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    int op = in_msg_body~load_uint(32); ;; parse the operation type encoded in the beginning of msg body
    var (counter) = load_data();
    if (op == 1) {
        ~strdump("increment recieved");
        save_data(counter + 1);
    }
}

() recv_external(slice in_msg_body) impure {
    ;; handle external messages
}

int counter() method_id {
    var (counter) = load_data();
    return counter;
}
